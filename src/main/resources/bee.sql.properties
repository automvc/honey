#\u7528\u6237\u81ea\u5b9a\u4e49SQL\u6587\u4ef6(sql\u4e3aDB\u80fd\u8bc6\u522b\u7684,\u81ea\u5b9a\u4e49sql,Bee\u4e0d\u8f6c\u6362)
#\u63a8\u8350\u4f7f\u7528bean\u7684\u5305\u540d\u6216\u90e8\u5206\u5305\u540d+\u6709\u610f\u4e49\u7684\u540d\u5b57\u4f5c\u4e3asql id\u540d\u79f0

#\u81ea\u5b9a\u4e49\u7684sql,\u5e76\u4e0d\u5f3a\u5236\u5728\u6b64\u914d\u7f6e,\u53ea\u662f\u4e3a\u4e86\u65b9\u4fbf\u7528\u6237\u6839\u636ekey\u83b7\u53d6sql.
#eg:String sql = CustomSql.getCustomSql("osql.example.entity.selectOrders");
#\u7136\u540e\u5c31\u53ef\u4ee5\u5728PreparedSql\u7b49\u4f7f\u7528\u83b7\u53d6\u5230\u7684sql.

#Customized sql string is not mandatory to be configured here. 
#It is just for the convenience of users to get sql string according to the key
#eg:String sql = CustomSql.getCustomSql("osql.example.entity.selectOrders");
#Then can use the sql string in PreparedSql and so on.

#eg: userid=?
#osql.example.entity.selectOrders=select * from orders where userid=?
#eg:userid=#{userid}
#osql.example.entity.selectOrdersViaMap=select * from orders where userid=#{userid}
#how to use like
#osql.example.entity.selectOrdersLikeNameViaMap=select * from orders where name like #{name%}
#osql.example.entity.selectOrdersLikeNameViaMap2=select * from orders where name like #{%name}
#osql.example.entity.selectOrdersLikeNameViaMap3=select * from orders where name like #{%name%}
#no palceholder
#osql.example.entity.selectAllOrders=select * from orders

#example.autosql.in=select * from orders where userid in #{userid @in}
#example.autosql.inAndIsNotNull.one=select * from orders where <if isNotNull>userid in #{userid@in}</if>
#example.autosql.like.isNotBlank=select * from orders where <if isNotBlank>name like #{%name}</if>
#example.autosql.like.isNotNull=select * from orders where <if isNotNull>name like #{%name}</if>
#example.autosql.toIsNULL1=select * from orders where userid=#{userid @toIsNULL1}
#example.autosql.toIsNULL2=select * from orders where id>=#{id@toIsNULL2}
